# ⚙️ Configuración para Docker - Arquitectura Hexagonal
# Demuestra flexibilidad: misma aplicación, diferentes bases de datos

spring:
  # 🗄️ Configuración H2 (por defecto en Docker)
  datasource:
    url: jdbc:h2:mem:pedidosdb
    driver-class-name: org.h2.Driver
    username: sa
    password: ""
  
  # 🔧 JPA/Hibernate
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.H2Dialect
  
  # 🌐 H2 Console (para desarrollo)
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true

# 📊 Actuator para health checks
management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always

# 📝 Logging
logging:
  level:
    com.example.pedidosddd: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

---
# 🐘 Perfil para PostgreSQL (arquitectura hexagonal en acción)
spring:
  config:
    activate:
      on-profile: postgresql
  
  # 🗄️ Configuración PostgreSQL 
  datasource:
    url: jdbc:postgresql://postgres:5432/pedidosdb
    driver-class-name: org.postgresql.Driver
    username: pedidos_user
    password: pedidos_pass
    
  # 🔧 JPA/Hibernate para PostgreSQL
  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        
  # 🚫 Deshabilitar H2 Console
  h2:
    console:
      enabled: false 